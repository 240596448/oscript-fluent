#Использовать notify
#Использовать logos

Перем Лог;

Перем Конвейер;
Перем Коллекция;

// Общее API

Процедура УстановитьКоллекцию(НоваяКоллекция) Экспорт
	Коллекция = НоваяКоллекция;
	Лог.Отладка("Установлена коллекция размером %1", Коллекция.Количество());
КонецПроцедуры

// Конвейерные методы

Функция Первые(Количество) Экспорт
	
	Лог.Отладка("Первые %1", Количество);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);

	Ячейка = ОписанияОповещений.Создать("ВыполнитьПервые", ЭтотОбъект, ДополнительныеПараметры);

	Конвейер.Добавить(Ячейка);

	Возврат ЭтотОбъект;

КонецФункции

Функция Пропустить(Количество) Экспорт
	
	Лог.Отладка("Пропустить %1", Количество);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	Ячейка = ОписанияОповещений.Создать("ВыполнитьПропустить", ЭтотОбъект, ДополнительныеПараметры);
	
	Конвейер.Добавить(Ячейка);
	
	Возврат ЭтотОбъект;

КонецФункции

Функция Различные() Экспорт
	ВызватьИсключение "Не реализовано.";
КонецФункции

Функция Обработать(ОписаниеОповещения) Экспорт
	
	Лог.Отладка("Обработать %1", ОписаниеОповещения.ИмяПроцедуры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОписаниеОповещения);
	
	Ячейка = ОписанияОповещений.Создать("ВыполнитьОбработать", ЭтотОбъект, ДополнительныеПараметры);
	
	Конвейер.Добавить(Ячейка);
	
	Возврат ЭтотОбъект;

КонецФункции

Функция Фильтровать(ОписаниеОповещения) Экспорт
	
	Лог.Отладка("Фильтровать %1", ОписаниеОповещения.ИмяПроцедуры);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОписаниеОповещения);

	Ячейка = ОписанияОповещений.Создать("ВыполнитьФильтровать", ЭтотОбъект, ДополнительныеПараметры);

	Конвейер.Добавить(Ячейка);

	Возврат ЭтотОбъект;

КонецФункции

Функция Сортировать(Знач ОписаниеОповещения = Неопределено) Экспорт
	
	Если ОписаниеОповещения = Неопределено Тогда
		ОписаниеОповещения = СтандартныйОбработчикСравнения();
	КонецЕсли;

	Лог.Отладка("Сортировать %1", ОписаниеОповещения.ИмяПроцедуры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОписаниеОповещения);
	
	Ячейка = ОписанияОповещений.Создать("ВыполнитьСортировать", ЭтотОбъект, ДополнительныеПараметры);
	
	Конвейер.Добавить(Ячейка);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Терминальные методы

Функция ВМассив() Экспорт
	
	Лог.Отладка("ВМассив");

	ПройтиКонвейер();

	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Служебные процедуры и функции

Процедура ВыполнитьПервые(Результат, ДополнительныеПараметры) Экспорт

	Количество = ДополнительныеПараметры.Количество;

	Лог.Отладка("ВыполнитьПервые %1", Количество);

	Результат = Новый Массив;
	Для сч = 0 По Количество - 1 Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПропустить(Результат, ДополнительныеПараметры) Экспорт
	
	Количество = ДополнительныеПараметры.Количество;
	
	Лог.Отладка("ВыполнитьПропустить %1", Количество);
	
	Результат = Новый Массив;
	Для сч = Количество По Коллекция.ВГраница() Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьФильтровать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьФильтровать %1", Обработчик.ИмяПроцедуры);
	
	Результат = Новый Массив;
		
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");

	Для Каждого Элемент Из Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатФильтрации);

		Если РезультатФильтрации Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбработать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьОбработать %1", Обработчик.ИмяПроцедуры);
	
	Результат = Новый Массив;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");
	
	Для Каждого Элемент Из Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатОбработки = Неопределено;
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатОбработки);
		
		Результат.Добавить(РезультатОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСортировать(Результат, ДополнительныеПараметры) Экспорт
	
	Обработчик = ДополнительныеПараметры.Обработчик;
	
	Лог.Отладка("ВыполнитьСортировать %1", Обработчик.ИмяПроцедуры);
	
	Результат = Коллекция;
	
	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	Обработчик.ДополнительныеПараметры.Вставить("Элемент2");

	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к];
			СледующийЭлемент = Результат[к - 1];
			Обработчик.ДополнительныеПараметры.Элемент1 = Элемент;
			Обработчик.ДополнительныеПараметры.Элемент2 = СледующийЭлемент;
			РезультатСортировки = Неопределено;
			ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатСортировки);
			Если РезультатСортировки > 0 Тогда
				Результат[к] = СледующийЭлемент;
				Результат[к - 1] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработчикСравнения(РезультатСортировки, ДополнительныеПараметры) Экспорт
	Элемент1 = ДополнительныеПараметры.Элемент1;
	Элемент2 = ДополнительныеПараметры.Элемент2;
	
	Если Элемент1 = Элемент2 Тогда
		РезультатСортировки = 0;
	ИначеЕсли Элемент1 > Элемент2 Тогда
		РезультатСортировки = 1;
	Иначе
		РезультатСортировки = -1;
	КонецЕсли;
КонецПроцедуры

Функция СтандартныйОбработчикСравнения()
	ФункцияСравнения = ОписанияОповещений.Создать("ОбработчикСравнения", ЭтотОбъект);
	Возврат ФункцияСравнения;
КонецФункции

Процедура ПройтиКонвейер()

	Лог.Отладка("Прохожу по конвейеру");

	Результат = Новый Массив;
	Для Каждого Ячейка Из Конвейер Цикл
		Лог.Отладка("Выполняю ячейку конвейера %1", Ячейка.ИмяПроцедуры);
		Лог.Отладка("Размер коллекции %1", Коллекция.Количество());

		ОписанияОповещений.ВыполнитьОбработкуОповещения(Ячейка, Результат);
		Коллекция = Результат;
	КонецЦикла;

КонецПроцедуры

Процедура Инициализация()
	Конвейер = Новый Массив;
	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Инициализация();