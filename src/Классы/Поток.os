#Использовать notify
#Использовать logos

Перем Лог;

Перем Конвейер;
Перем ПотокСлужебный;

// Общее API

Процедура УстановитьКоллекцию(НоваяКоллекция) Экспорт
	ПотокСлужебный.УстановитьКоллекцию(НоваяКоллекция);
	Лог.Отладка("Установлена коллекция размером %1", ПотокСлужебный.ПолучитьКоллекцию().Количество());
КонецПроцедуры

// Конвейерные методы

Функция Первые(Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер("Первые", , ДополнительныеПараметры);
	Возврат ЭтотОбъект;

КонецФункции

Функция Пропустить(Количество) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Количество", Количество);
	
	ПоложитьЯчейкуВКонвейер("Пропустить", , ДополнительныеПараметры);
	Возврат ЭтотОбъект;

КонецФункции

Функция Различные(ОбработчикСравнения = Неопределено) Экспорт

	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = Потоки.СтандартныйОбработчикСравнения();
	КонецЕсли;

	ПоложитьЯчейкуВКонвейер("Различные", ОбработчикСравнения);
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Обработать(ОписаниеОповещения) Экспорт
	
	ПоложитьЯчейкуВКонвейер("Обработать", ОписаниеОповещения);
	Возврат ЭтотОбъект;

КонецФункции

Функция Фильтровать(ОписаниеОповещения) Экспорт
	
	ПоложитьЯчейкуВКонвейер("Фильтровать", ОписаниеОповещения);
	Возврат ЭтотОбъект;

КонецФункции

Функция Сортировать(Знач ОбработчикСравнения = Неопределено) Экспорт
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = Потоки.СтандартныйОбработчикСравнения();
	КонецЕсли;

	ПоложитьЯчейкуВКонвейер("Сортировать", ОбработчикСравнения);
	Возврат ЭтотОбъект;
	
КонецФункции

// Терминальные методы

Функция ПолучитьПервый() Экспорт
	Лог.Отладка("ПолучитьПервый");
	
	ПройтиКонвейер();

	Результат = Неопределено;
	Коллекция = ПотокСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Результат = Элемент;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ВМассив() Экспорт
	
	Лог.Отладка("ВМассив");

	ПройтиКонвейер();

	Результат = Новый Массив;
	Коллекция = ПотокСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция Количество() Экспорт
	
	Лог.Отладка("Количество");
	
	ПройтиКонвейер();
	
	Коллекция = ПотокСлужебный.ПолучитьКоллекцию();
	Результат = Коллекция.Количество();
	
	Возврат Результат;

КонецФункции

Функция ДляКаждого(ОписаниеОповещения) Экспорт
	
	Лог.Отладка("ДляКаждого");
	
	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОписаниеОповещения);
	
	ПотокСлужебный.ВыполнитьОбработать(Результат, ДополнительныеПараметры);
	
	Возврат Результат;

КонецФункции

Функция Минимум(ОбработчикСравнения = Неопределено) Экспорт
	
	Лог.Отладка("Минимум");
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = Потоки.СтандартныйОбработчикСравнения();
	КонецЕсли;

	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикСравнения);
	
	ПотокСлужебный.ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;

КонецФункции

Функция Максимум(ОбработчикСравнения = Неопределено) Экспорт
	
	Лог.Отладка("Максимум");
	
	Если ОбработчикСравнения = Неопределено Тогда
		ОбработчикСравнения = Потоки.СтандартныйОбработчикСравнения();
	КонецЕсли;
	
	ПройтиКонвейер();
	
	Результат = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикСравнения);
	
	ПотокСлужебный.ВыполнитьСортировать(Результат, ДополнительныеПараметры);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[Результат.Количество() - 1];
	КонецЕсли;
	
КонецФункции

Функция Сократить(Обработчик, НачальноеЗначение = Неопределено) Экспорт

	Лог.Отладка("Сократить");
	
	ПройтиКонвейер();

	Результат = НачальноеЗначение;
	Коллекция = ПотокСлужебный.ПолучитьКоллекцию();
	Для Каждого Элемент Из Коллекция Цикл
		Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
			Обработчик.ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		Обработчик.ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, Результат);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Служебные процедуры и функции

Процедура ПоложитьЯчейкуВКонвейер(ИмяОперации, 
								  ВходящееОписаниеОповещения = Неопределено, 
								  ДополнительныеПараметры = Неопределено)
	
	Сообщение = ИмяОперации;
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		Сообщение = Сообщение + " " + ВходящееОписаниеОповещения.ИмяПроцедуры;
	КонецЕсли;
	Лог.Отладка(Сообщение);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ВходящееОписаниеОповещения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Обработчик", ВходящееОписаниеОповещения);
	КонецЕсли;

	Ячейка = ОписанияОповещений.Создать("Выполнить" + ИмяОперации, ПотокСлужебный, ДополнительныеПараметры);
	
	Конвейер.Добавить(Ячейка);
	
КонецПроцедуры

Процедура ПройтиКонвейер()

	Лог.Отладка("Прохожу по конвейеру");

	Результат = Новый Массив;
	Для Каждого Ячейка Из Конвейер Цикл
		Коллекция = ПотокСлужебный.ПолучитьКоллекцию();
		
		Лог.Отладка("Выполняю ячейку конвейера %1", Ячейка.ИмяПроцедуры);
		Лог.Отладка("Размер коллекции %1", Коллекция.Количество());

		ОписанияОповещений.ВыполнитьОбработкуОповещения(Ячейка, Результат);
		ПотокСлужебный.УстановитьКоллекцию(Результат);
	КонецЦикла;

	Конвейер.Очистить();

КонецПроцедуры

Процедура Инициализация()
	Конвейер = Новый Массив;
	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
	Лог.УстановитьУровень(УровниЛога.Отладка);

	ПутьКСценарию_ПотокСлужебный = ОбъединитьПути(ТекущийСценарий().Каталог, "ПотокСлужебный.os");
	ПотокСлужебный = ЗагрузитьСценарий(ПутьКСценарию_ПотокСлужебный);
КонецПроцедуры

Инициализация();